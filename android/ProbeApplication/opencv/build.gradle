apply plugin: 'com.android.library'

apply plugin: 'maven-publish'

ext {
    publishedGroupId = 'com.spincar'
    libraryName = 'opencv'
    artifact = 'opencv'
    publishedName = 'opencv'

    libraryDescription = 'Spincar Bundle for OpenCV'

    siteUrl = 'http://spincar.com'

    libraryVersion = '4.1.1'

    developerId = 'spincar'
}


android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 28
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    sourceSets {
        main {
            jni.srcDirs = ['src/main/native/jni/libs']
            jniLibs.srcDirs = ['src/main/native/libs']
            java.srcDirs = ['src/main/java']
            aidl.srcDirs = ['src/main/aidl']
            res.srcDirs = ['src/main/res']
            manifest.srcFile 'src/main/AndroidManifest.xml'
        }
    }
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

def localProps = new Properties()
file("../aws.keys").withInputStream { localProps.load(it) }

publishing {
    repositories {
//        maven {
//            url "s3://spincar-sdk/"
//            credentials(AwsCredentials) {
//                accessKey localProps.getProperty("s3PublishAccessKey")
//                secretKey localProps.getProperty("s3PublishSecretKey")
//            }
//        }
        mavenLocal()
    }
    publications {
        aar(MavenPublication) {

            // Thanks to https://stackoverflow.com/questions/24743562/gradle-not-including-dependencies-in-published-pom-xml
            // ###############################################################
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.api.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }

            }
            // ##############################################################


            groupId "$publishedGroupId"
            version = "$libraryVersion"
            artifactId "$publishedName"

            artifact("$buildDir/outputs/aar/opencv.aar")
            artifact sourceJar
        }
    }
}